#pragma once

// XSecAnalyzer includes
#include "XSecAnalyzer/Binning/Block.hh"
#include "XSecAnalyzer/Binning/BinSchemeBase.hh"
#include "XSecAnalyzer/Binning/BinSchemeFactory.hh"
#include "XSecAnalyzer/HistUtils.hh"
#include "XSecAnalyzer/FilePropertiesManager.hh"

class MakeConfig {

  public:

    MakeConfig( const std::string& bin_scheme_name );
    virtual ~MakeConfig();

    void BinScheme();
    void Print();
    void ResPlots();

  private:

    std::string bin_scheme_name_;
    std::unique_ptr< BinSchemeBase > bin_scheme_;
    std::vector< BlockTrueReco >* vect_block;
    std::vector<BlockReco> * vect_sideband;

    std::string TREE;
    std::string BIN_CONFIG;
    std::string SELECTION;
    std::string DIRECTORY;
    std::string CATEGORY;
    std::vector<int>* background_index;

    // The anticipated POT to use when scaling the MC prediction in the
    // expected reco events plot. This will help ensure that all choices of
    // reco binning are informed by the expected statistical uncertainties when
    // the full dataset is analyzed.
    //
    // Full dataset for Runs 1-3
    static constexpr double EXPECTED_POT = 6.790e20;

    // Number of true bins to use when plotting true distributions in a given
    // reco bin
    static constexpr int DEFAULT_TRUE_BINS = 100;

    // ROOT integer code for Arial font
    static constexpr int FONT_STYLE = 62; // Arial

    // When bins have zero content, set them to this very small value so that
    // the colz style will still paint them
    static constexpr double REALLY_SMALL = 1e-11;

    // Dummy counter used to ensure that each histogram generated by this
    // function has a unique name to use with TTree::Draw()
    static int hist_count;

    std::set< int > RUNS;

    void make_res_plots( const std::string& branchexpr,
        const std::string& variable_title, const std::string& selection,
        const std::set<int>& runs, std::vector<double> bin_low_edges,
        bool show_bin_plots = true,
        bool show_smear_numbers = false,
        int num_true_bins = DEFAULT_TRUE_BINS,
        const std::string& mc_branchexpr = "",
        const std::string& signal_cuts = "mc_is_signal",
        const std::string& mc_event_weight = DEFAULT_MC_EVENT_WEIGHT );


    // Overloaded version that uses a fixed number of equal-width bins
    void make_res_plots( const std::string& branchexpr,
        const std::string& variable_title, const std::string& selection,
        const std::set<int>& runs,
        double xmin, double xmax, int Nbins,
        bool show_bin_plots = true,
        bool show_smear_numbers = false,
        int num_true_bins = DEFAULT_TRUE_BINS,
        const std::string& mc_branchexpr = "",
        const std::string& signal_cuts = "mc_is_signal",
        const std::string& mc_event_weight = DEFAULT_MC_EVENT_WEIGHT );

    void make_res_plots( std::istream& in_file,
        const std::set<int>& runs,
        const std::string& universe_branch_name = "TunedCentralValue_UBGenie",
        size_t universe_index = 0u,
        bool show_smear_numbers = false,
        const std::string& str_title = "<title>",
        const std::string& str_units =  "<units>");

    void make_res_plots( std::istream& in_file,
        const std::set<int>& runs,
        const std::string& str_title,
        const std::string& str_units);

     void make_res_plots( std::istream& in_stream,
    const std::set<int>& runs, const std::string& universe_branch_name,
    size_t universe_index, bool show_smear_numbers );

};
